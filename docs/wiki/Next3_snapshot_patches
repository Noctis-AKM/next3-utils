next3_snapshot.patch adds snapshot support to Next3 (after it was cloned from Ext3).

The next3_snapshot patch aggregates all next3_snapshot_X sub-patches and next3_snapshot_X_Y sub-sub-patches.

==next3_snapshot_debug.patch==

next3: snapshot debugging support

Control snapshot debug level via debugfs entry /next3/snapshot-debug.
Control snapshot unit tests via debugfs entries /next3/test-XXX.

==next3_snapshot_hooks.patch==

next3: snapshot hooks

Insert generic snapshot API calls inside Next3 file system.

===next3_snapshot_hooks_jbd.patch===

next3: snapshot hooks - inside JBD hooks

Before every meta data buffer write, the journal API is called,
namely, one of the next3_journal_get_XXX_access() functions.
We use these journal hooks to call the snapshot API,
before every meta data buffer write.

===next3_snapshot_hooks_delete.patch===

next3: snapshot hooks - delete blocks

Before deleting file blocks in next3_free_blocks(),
we call the snapshot API snapshot_get_delete_access(),
to optionally move the block to the snapshot file.

===next3_snapshot_hooks_data.patch===

next3: snapshot hooks - move data blocks

Before every regular file data buffer write,
the function next3_get_block() is called to map the buffer to disk.
We use this hook to call the snapshot API snapshot_get_move_access(),
to optionally move the block to the snapshot file.

==next3_snapshot_file.patch==

next3: snapshot file

Next3 snapshot implementation as a file inside the file system.
Snapshot files are marked with the snapfile flag and have special
read-only address space ops.

===next3_snapshot_file_read.patch===

next3: snapshot file - read through to block device

On active snapshot file page read, the function next3_get_block()
is called to map the page to a disk block.  If the page is not mapped
in the snapshot file a direct mapping to the block device is returned.

===next3_snapshot_file_perm.patch===

next3: snapshot file - permissions

Enforce snapshot file permissions.
Write, truncate and unlink of snapshot inodes is not allowed.

===next3_snapshot_file_store.patch===

next3: snapshot file - store on disk

Snapshot inode is stored differently in memory and on disk.
During store and load of snapshot inode, some of the inode flags
and fields are converted.

===next3_snapshot_file_huge.patch===

next3: snapshot file - increase maximum file size limit to 16TB

Files larger than 2TB use Ext4 huge_file flag to store i_blocks
in file system blocks units, so the upper limit on snapshot actual
size is increased from 512*2^32 = 2TB to 4K*2^32 = 16TB,
which is also the upper limit on file system size.
To map 2^32 logical blocks, 4 triple indirect blocks are used instead
of just one.  The extra 3 triple indirect blocks are stored in-place
of direct blocks, which are not in use by snapshot files.

===next3_snapshot_file_old.patch===

next3: snapshot file - migrate old on-disk format

Snapshot flags and super block field positions have changed.
When old has_snapshot flag is set, copy fields to new position,
clear old flags and fields and set new flags on mount time.

==next3_snapshot_block.patch==

next3: snapshot block operations

Core implementation of special snapshot file block operations.
The argument @create to the function next3_get_blocks_handle()
is re-interpreted as a snapshot block command argument.  The old
argument values 0(=read) and 1(=create) preserve the original
behavior of the function.  The bit field h_cowing in the current
transaction handle is used to prevent COW recursions.

===next3_snapshot_block_cow.patch===

next3: snapshot block operation - copy blocks to snapshot

Implementation of copying blocks into a snapshot file.
This mechanism is used to copy-on-write metadata blocks to snapshot.

===next3_snapshot_block_move.patch===

next3: snapshot block operation - move blocks to snapshot

Implementation of moving blocks into a snapshot file.
The move block command maps an allocated blocks to the snapshot file,
allocating only the indirect blocks when needed.
This mechanism is used to move-on-write data blocks to snapshot.

===next3_snapshot_block_bitmap.patch===

next3: snapshot block operation - copy block bitmap to snapshot

The snapshot copy of the file system block bitmap is called the COW
bitmap and it is used to check if a block was allocated at the time
that the snapshot was taken.

==next3_snapshot_ctl.patch==

next3: snapshot control

Snapshot control with chattr -X.
Take/delete snapshot with chattr -X +/-S.
Enable/disable snapshot with chattr -X +/-n.

===next3_snapshot_ctl_init.patch===

next3: snapshot control - init new snapshot

On snapshot create, a few special blocks (i.e., the super block and
group descriptors) are pre-allocated and on snapshot take, they are
copied under journal_lock_updates().  This is done to avoid the
recursion that would be caused by COWing these blocks after the
snapshot becomes active.

===next3_snapshot_ctl_fix.patch===

next3: snapshot control - fix new snapshot

On snapshot take, after copying the pre-allocated blocks, some are
fixed to make the snapshot image appear as a valid Ext2 file system.
The has_journal and has_snapshot flags are cleared from the super
block as well as the journal inode and last snapshot inode fields.
All snapshot inodes are cleared (to appear as empty inodes).

===next3_snapshot_ctl_reserve.patch===

next3: snapshot control - reserve disk space for snapshot

Ensure there is enough disk space for snapshot file future use.
Reserve disk space on snapshot take based on file system overhead
size, number of directories and number of blocks/inodes in use.

===next3_snapshot_ctl_dump.patch===

next3: snapshot control - dump snapshot file blocks map

Use chattr -d to print the blocks map of a snapshot file.
Snapshot debugging should be enabled.

==next3_snapshot_journal.patch==

next3: snapshot journaled

Next3 snapshot operations are journaled inside the same transaction
with the file system operation that triggered them.

===next3_snapshot_journal_error.patch===

next3: snapshot journaled - record errors in journal

Next3 error state is recorded in the journal super block and error
messages are recorder in free space after the journal super block.
Next3 should be mounted with errors=remount-ro.
After a snapshot error, the file system will be in read-only mode.
The administrator must un-mount the file system and run fsck
to prevent data corruption.
Some places in Ext3 original code don't check for return value of
JBD functions.  Check for snapshot/journal errors in those places.

===next3_snapshot_journal_credits.patch===

next3: snapshot journaled - increase transaction credits

Snapshot operations are journaled as part of the running transaction.
The amount of requested credits is multiplied with a factor, to ensure
that enough buffer credits are reserved in the running transaction.

===next3_snapshot_journal_release.patch===

next3: snapshot journaled - implement journal_release_buffer()

The API journal_release_buffer() is called to cancel a previous call
to journal_get_write_access() and to recall the used buffer credit.
Current implementation of journal_release_buffer() in JBD is empty,
since no buffer credits are used until the buffer is marked dirty.
However, since the resulting snapshot COW operation cannot be undone,
we try to extend the current transaction to compensate for the used
credits of the extra COW operation, so we don't run out of buffer
credits too soon.

===next3_snapshot_journal_bypass.patch===

next3: snapshot journaled - bypass to save credits

Don't journal COW bitmap indirect blocks to save journal credits.
On very few COW operations (i.e., first block group access after
snapshot take), there may be up to 3 extra blocks allocated for the
active snapshot (i.e., COW bitmap block and up to 2 indirect blocks).
Taking these 3 extra allocations into account on every COW operation
would further increase the transaction's COW credits factor.
Instead, we choose to pay a small performance penalty on these few
COW bitmap operations and wait until they are synced to disk.

===next3_snapshot_journal_cache.patch===

next3: snapshot journaled - cache last COW tid in journal_head

Cache last COW transaction id in buffer's journal_head.
The cache suppresses COW tests until the transaction in committed.
By default, the running transaction is committed every 5 seconds,
which implies an average COW cache expiry of 2.5 seconds.
Before taking a new snapshot, the journal is flushed to disk
and the current transaction in committed, so the COW cache is
invalidated (as it should be).

===next3_snapshot_journal_trace.patch===

next3: snapshot journaled - trace COW/buffer credits

Extra debug prints to trace snapshot usage of buffer credits.

==next3_snapshot_list.patch==

next3: snapshot list support

Implementation of multiple incremental snapshots.
Snapshot inodes are chained on a list starting at the super block,
both on-disk and in-memory, similar to the orphan inodes.  We reuse
the orphan inode list functions to manipulate the snapshot list.
Unlink and truncate of snapshot inodes on the list is not allowed,
so an inode can never be chained on both orphan and snapshot lists.
We make use of this fact to overload the in-memory inode field
next3_inode_info.i_orphan for the chaining of snapshots.

===next3_snapshot_list_read.patch===

next3: snapshot list - read through to previous snapshot

On snapshot page read, the function next3_get_block() is called
to map the page to a disk block.  If the page is not mapped in the
snapshot file, the newer snapshots on the list are checked and the
oldest found mapping is returned.  If the page is not mapped in any of
the newer snapshots, a direct mapping to the block device is returned.

==next3_snapshot_race.patch==

next3: snapshot race conditions

Resolve snapshot race conditions

===next3_snapshot_race_bitmap.patch===

next3: snapshot race conditions - concurrent COW bitmap operations

Wait for pending COW bitmap creations to complete.
When concurrent tasks try to COW buffers from the same block group
for the first time, the first task to reset the COW bitmap cache
is elected to create the new COW bitmap block.  The rest of the tasks
wait (in msleep(1) loop), until the COW bitmap cache is uptodate.
The COWing task copies the bitmap block into the new COW bitmap block
and updates the COW bitmap cache with the new block number.

===next3_snapshot_race_cow.patch===

next3: snapshot race conditions - concurrent COW operations

Wait for pending COW operations to complete.
When concurrent tasks try to COW the same buffer, the task that takes
the active snapshot truncate_mutex is elected as the the COWing task.
The COWing task allocates a new snapshot block and creates a buffer
cache entry with ref_count=1 for that new block.  It then locks the
new buffer and marks it with the buffer_new flag.  The rest of the
tasks wait (in msleep(1) loop), until the buffer_new flag is cleared.
The COWing task copies the source buffer into the 'new' buffer,
unlocks it, marks it as journal dirty data, clears the new_buffer flag
and drops its reference count.
On active snapshot readpage, the buffer cache is checked.
If a 'new' buffer entry is found, the reader task waits until the
buffer_new flag is cleared and then copies the 'new' buffer directly
into the snapshot file page.

===next3_snapshot_race_read.patch===

next3: snapshot race conditions - tracked reads

Wait for pending read I/O requests to complete.
When a snapshot file readpage reads through to the block device,
the reading task increments the block tracked readers count.
Upon completion of the async read I/O request of the snapshot page,
the tracked readers count is decremented.
When a task is COWing a block with non-zero tracked readers count,
that task has to wait (in msleep(1) loop), until the block's tracked
readers count drops to zero, before the COW operation is completed.
After a pending COW operation has started, reader tasks have to wait
(again, in msleep(1) loop), until the pending COW operation is
completed, so the COWing task cannot be starved by reader tasks.

==next3_snapshot_exclude.patch==

next3: snapshot exclude

Mark all snapshot blocks excluded from COW bitmap (i.e., mark that
they do not need to be COWed).  The excluded blocks appear as not
allocated inside the snapshot image (no snapshots of snapshot files).
Excluding snapshot file blocks is essential for efficient cleanup
of deleted snapshot files.

===next3_snapshot_exclude_inode.patch===

next3: snapshot exclude - the exclude inode

The exclude inode owns all the exclude bitmap blocks.
The exclude inode is pre-allocated by 'tune2fs -O exclude_inode'.
The location of exclude bitmap blocks is read on mount time and cached
in the group descriptors.  The exclude inode is extended upon online
and offline resize operations when block groups are added.

===next3_snapshot_exclude_inode_old.patch===

next3: snapshot exclude - migrate old exclude inode

Exclude inode number has changed from 10 to 9.  The exclude_inode
flag has also changed.  When old exclude_inode flag is set,
copy inode 10 to 9, clear inode 10 and clear old exclude_inode flag.
(new exclude_inode flag is set during migration of super block).

===next3_snapshot_exclude_bitmap.patch===

next3: snapshot exclude - the exclude bitmap

Excluding blocks is done by setting their bit in the exclude bitmap.
There is one exclude bitmap block per block group and its location
is cached in the group descriptor.

==next3_snapshot_cleanup.patch==

next3: snapshot cleanup

Cleanup snapshots list and reclaim unused blocks of deleted snapshots.
Oldest snapshot can be removed from list and its blocks can be freed.
Non-oldest snapshots have to be shrunk and merged before they can be
removed from the list.  All snapshot blocks must be excluded in order
to properly shrink/merge deleted old snapshots.

===next3_snapshot_cleanup_shrink.patch===

next3: snapshot cleanup - shrink deleted snapshots

Free blocks of deleted snapshots, which are not in use by an older
non-deleted snapshot.  Shrinking helps reclaiming disk space
while older snapshots are currently in use (enabled).

===next3_snapshot_cleanup_merge.patch===

next3: snapshot cleanup - merge shrunk snapshots

Move blocks of deleted and shrunk snapshots to an older non-deleted
and disabled snapshot.  Merging helps removing snapshots from list
while older snapshots are not currently in use (disabled).