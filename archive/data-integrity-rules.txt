Next3 snapshot code review - data integrity rules

The code reviewer are required to follow the snapshot patch

and verify that no line of code breaks any of the data integrity rules.

Data integrity rules:

1. Snapshot code MUST NOT change any data or meta data block, EXCEPT changes
   that are explicitly allowed by other data integrity rules

2. Snapshot code MAY change unused fields and bits in on-disk file system
   structures

(which are also not used by ext2 and ext4). Specifically (next.h):

- struct next3_group_desc.bg_reserved[0-1]

/* bg_exclude_bitmap set by mke2fs/tune2fs on fs with no snapshots and by
   online resize under ? */

/* bg_cow_bitmap set by next3_snapshot_read_cow_bitmap() under
   sb_bgl_lock(), reset by next3_snapshot_reset_cow_bitmap under
   lock_super() or sb_lock */

- struct next3_inode.osd2.linux1.l_i_reserved1 (overlaps ext4 l_i_version)

- struct next3_inode.osd2.linux2.l_i_reserved2

/* i_snapshot_blocks, i_next_snapshot set by next3_do_update_inode() under
   inode_mutex (?) */

- struct next3_inode.i_flags & 0x7F000000 (Snapshot persistent flags)

- struct next3_inode.i_flags & 0x00F80000 (Snapshot non-persistent flags
  overlaps ext4 extents flag)

/* set by next3_ioctl() under sbi->snapshot_mutex and inode_mutex */
/* set by next3_snapshot_load() under sb_lock */
/* set by next3_iget() on first non cached inode access */

- struct next3_super_block.s_reserved[last 3]

/* s_last_snapshot reset by tune2fs on cleanly un mounted fs */
/* s_last_snapshot, s_last_snapshot_id, s_snapshot_r_blocks_count set by
   snapshot_take() under lock_super() */
/* s_last_snapshot reset by next3_inode_list_del() under lock_super() */

- struct next3_super_block.s_feature_compat & 0x00001000 ("exclude_inode"
  feature)

/* ON/OFF by mke2fs/tune2fs on cleanly un mounted fs with no snapshots */

- struct next3_super_block.s_feature_ro_compat & 0x00001000 ("has_snapshot"
  feature)

/* ON by mke2fs/tune2fs, OFF by tune2fs on cleanly un mounted fs */
/* ON by snapshot_take() under lock_super() */

3. Snapshot code MAY add fields and bits to in-memory file system structures,
   as long as they are initialized properly.  Specifically:

- struct buffer_head.b_state & 1<<BH_Tracked_Read (buffer_head.h)
/* set by next3_snapshot_get_block() under lock_buffer()
   along with taking 0x10000 refcounts on bdev buffer */
/* cleared by end_buffer_async_read() (fs/buffer.c) under lock_buffer()
   along with dropping 0x10000 refcounts on bdev buffer */
/* end_buffer_tracked_read() clears the buffer mapped flag
   to prevent reading the block returned by next3_snapshot_get_block() again
   without tracking the read */

- struct next3_sb_info.{s_snapshot_mutex, s_active_snapshot,
  s_snapshot_list} (next3_sb.h)

/* active_snapshot set by next3_snapshot_take() and next3_snapshot_update()
   under snapshot_mutex or sb_lock */
/* snapshot_list set by next3_snapshot_create() and next3_snapshot_update()
   under snapshot_mutex or sb_lock */

- struct handle_s.{h_level,h_base_credits,h_cow_*} (jbd.h)

/* this struct is per task - should verify SMP safe though not relevant to
   CTERA platforms */
/* h_level, h_cow_* set by next3_snapshot_test_and_cow() */
/* h_{buffer,base,cow}_credits set by
   next3_journal_{start,restart,extend,release}() */

- struct journal_head.b_cow_tid (journal_head.h)

/* set by next3_snapshot_test_and_cow() under jbd_lock_bh_state() */

4. The "snapshot file" flag (struct next3_inode.i_flags & NEXT3_SNAPFILE_FL)
   MAY ONLY be set by executing a special user ioctl on an empty file
   (NEXT3_IOC_SETFLAGS)

/* under sbi->snapshot_mutex and inode_mutex:
   NEXT3_SNAPFILE_FL and NEXT3_SNAPFILE_TAKE_FL set and inode added to
   in-memory snapshot list by next3_snapshot_create()

   NEXT3_SNAPFILE_TAKE_FL cleared, inode added to on-disk snapshot list and
   set as in-memory active snapshot by next3_snapshot_take() on success

   NEXT3_SNAPFILE_FL and NEXT3_SNAPFILE_TAKE_FL cleared and inode removed
   from in-memory list by next3_snapshot_update() after snapshot_take()
   failure */

/* NEXT3_SNAPFILE_FL flag cleared by next3_iget() for non-cached inodes on
   first time access */

/* NEXT3_SNAPFILE_FL flag is set by next3_snapshot_load() for all inodes on
   the on-disk snapshot list under sb_lock */

/* once a snapshot inode is on the in-memory snapshot list it has a
   reference count and is never dropped from inode cache */

5. Snapshot code MAY directly change data and meta data blocks, which are
   exclusively associated with "snapshot inodes" (inodes with the "snapshot
   file" flag set) and with the special "exclude inode" (NEXT3_EXCLUDE_INO)

/* exclude inode blocks are allocated and initialized by tune2fs/mke2fs */

/* exclude inode data blocks are modified and journalled (data journalled)
   by next3_snapshot_test_and_cow() */

/* active snapshot inode blocks are allocated, modified and journalled (data
   ordered) by next3_snapshot_test_and_cow() under various snapshot race
   protections (see NEXT3_FS_SNAPSHOT_RACE) */

/* deleted snapshot inode blocks are de-allocated by next3_snapshot_update()
   under sbi->snapshot_mutex (next3_unlink() and next3_truncate() of snapshot
   inode are not permitted) */

6. Snapshot code MAY indirectly change file system global counters, due to
   "snapshot inode" changes. Specifically:

-          struct next3_group_desc.bg_free_blocks_count

-          struct next3_super_block.s_free_blocks_count

-          struct next3_sb_info.s_freeblocks_counter
/* not changed directly by snapshot code */


7. Snapshot code MAY un-map a regular file data block from its inode, given
   that the data of this block is about to become obsolete (overwritten)

/* need to verify there is no race condition between concurrent
   next3_snapshot_get_move_access() on the same data block */
