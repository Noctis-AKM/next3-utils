#!/bin/sh
# Copyright (C) Amir Goldstein <amir@ctera.com>, 2008-2010
# Copyright (C) CTERA Networks, 2008-2010
#
# snapshot management script
#

# default snapshot-name is the <date-time> in shadow copy format
if [ -z $2 ] ; then
	s=$( date -u +@GMT-%Y.%m.%d-%H.%M.%S )
else
	s=$2
fi

SYSDEBUGDIR=/sys/kernel/debug
SNAPDEBUGDIR=$SYSDEBUGDIR/snapshot
#TIME=time
MOUNT_NEXT3=/usr/sbin/mount.next3
UMOUNT_NEXT3=/usr/sbin/umount.next3

# default debug-level is old-debug-level
if [ ! -d $SNAPDEBUGDIR ] ; then
	mount -t debugfs debugfs $SYSDEBUGDIR 2> /dev/null
fi
L=$(cat $SNAPDEBUGDIR/snapshot-debug 2> /dev/null)
if [ -z $2 ] ; then
	l=$L
else
	l=$2
fi

# read snapshot block device and mount point from conf file
SNAPCONF=.snapshot.conf

# look for snapshot config file in current then home directory
if [ -z $ROOTDEV ] || [ -z $ROOTDIR ] || [ -z $VOL ] ; then
	if [ -e ./$SNAPCONF ] ; then
		. ./$SNAPCONF
	elif [ -e ~/$SNAPCONF ] ; then
		. ~/$SNAPCONF
	fi
fi
if [ ! -z $1 ] && [ $1 != help ] && [ $1_$2 != $1_help ] && [ $1 != config ] && \
	[ $1 != version ] && [ $1 != debug ] && [ $1 != delay ] ; then
	if [ -z $ROOTDEV ] || [ ! -e $ROOTDEV ] ; then
		echo bad block device $ROOTDEV - run $0 $1 config or define ROOTDEV
		exit 1
	fi
	if [ -z $ROOTDIR ] || [ ! -d $ROOTDIR ] ; then
		echo bad mount point $ROOTDIR - run $0 config or define ROOTDIR
		exit 1
	fi
	if [ -z $VOL ] ; then
		echo missing volume name - run $0 config or define VOL
		exit 1
	fi
fi

SNAPMNTDIR=/var/vol/snapshots
SNAPDEVDIR=/dev/snapshots
mkdir -p $SNAPDEVDIR 2> /dev/null
mkdir -p $SNAPMNTDIR 2> /dev/null
modprobe next3 2> /dev/null

SNAPDIR=$ROOTDIR/.ctera/snapshots

# See how we were called.
case "$1" in
# Snapshot global commands
  help)
	if [ -z $2 ] ; then
		$0
	else
		$0 $2 help
	fi
	;;
  version)
	if [ $1_$2 = $1_help ] ; then
		echo "$1: display next3 snapshot version."
		exit 0
	fi
	ver=$(cat $SNAPDEBUGDIR/snapshot-version)
	echo snapshot-version = $ver
	;;
  debug)
	if [ $1_$2 = $1_help ] ; then
		echo "$1: set snapshot debug level."
		echo "debug levels: 0=none, 1=error, 2=warning, 3=info, 4=debug."
		echo "usage: $0 $1 [debug-level]"
		exit 0
	fi
	echo $l > $SNAPDEBUGDIR/snapshot-debug
	l=$(cat $SNAPDEBUGDIR/snapshot-debug)
	echo snapshot-debug = $l
	;;
  delay)
	if [ $1_$2 = $1_help ] ; then
		echo "$1: set snapshot test delay."
		echo "adds delay to specific snapshot operation."
		echo "usage: $0 $1 <take|delete|cow|read|bitmap> [delay-sec] [delay-msec]"
		exit 0
	fi
	if [ -z $2 ] ; then
		echo missing test name
		exit 1
	fi
	if [ ! -z $3 ] ; then
		if [ $3 -gt 60 ] || [ $3 -lt 0 ] ; then
			echo valid range for test delay is 0-60 sec
		else
			if [ ! -z $4 ] ; then
				ms=$3$4
			else
				ms=${3}000
			fi
			echo $ms > $SNAPDEBUGDIR/test-$2-delay-msec
		fi
	fi
	ms=$(cat $SNAPDEBUGDIR/test-$2-delay-msec)
	echo test-$2-delay = $ms msec
	;;

# Next3 volume commands
  config)
	if [ $1_$2 = $1_help ] ; then
		echo "$1: configure snapshot script parameters."
		echo "creates configuration file .snapshot.conf in current and home directory."
		echo "the snapshot script works on a single volume at a time"
		echo "and the configuration file defines that volume."
		echo "usage: $0 $1 <block-device> <mount-point> <volume-name>"
		exit 0
	fi
	if [ -z $2 ] || [ -z $3 ] || [ -z $4 ] ; then
		$0
		exit 1
	fi
	export ROOTDEV=$2
	export ROOTDIR=$3
	export VOL=$4
	echo export ROOTDEV=$2 > $SNAPCONF
	echo export ROOTDIR=$3 >> $SNAPCONF
	echo export VOL=$4 >> $SNAPCONF
	cat $SNAPCONF
	cp $SNAPCONF ~/
	;;
  install|in)
	if [ $1_$2 = $1_help ] ; then
		echo "install: convert an ext3 volume to next3."
		echo "to start using snapshots on a pre formated ext3 volume"
		echo "the file system needs to be converted to next3 first."
		echo "usage: $0 {install|in}"
		exit 0
	fi
	if [ -e $ROOTDEV ] ; then
		$0 stop || exit 1
		tune2fs -c 0 -i 0 -e remount-ro -O has_snapshot $ROOTDEV
		$0 start || exit 1
		mkdir -p $SNAPDIR
	fi
	;;
  uninstall|un)
	if [ $1_$2 = $1_help ] ; then
		echo "uninstall: convert a next3 volume to ext3."
		echo "all existing snapshots will be discarded."
		echo "usage: $0 {uninstall|un}"
		exit 0
	fi
	if [ -e $ROOTDEV ] ; then
		$0 stop || exit 1
		tune2fs -O ^has_snapshot $ROOTDEV
		$0 start || exit 1
		rm -rf $SNAPDIR
	fi
	;;
  mkfs)
	if [ $1_$2 = $1_help ] ; then
		echo "$1: format a next3 volume."
		echo "usage: $0 $1"
		exit 0
	fi
	$0 stop || exit 1
	mke2fs -j -O has_snapshot,big_journal,exclude_inode $ROOTDEV
	tune2fs -e remount-ro $ROOTDEV
	$0 start
	;;
  start)
	if [ $1_$2 = $1_help ] ; then
		echo "$1: mount next3 volume and all its snapshots."
		echo "usage: $0 $1"
		exit 0
	fi
	if [ -e $ROOTDEV ] ; then
		# mount next3 volume
		if [ -e $MOUNT_NEXT3 ] ; then
			$MOUNT_NEXT3 $ROOTDEV $ROOTDIR $VOL
		else
			mount -t next3 $ROOTDEV $ROOTDIR
		fi || exit 1
		mkdir -p $SNAPDIR
		# auto mount all snapshots
		$0 mount
	fi
	;;
  stop)
	if [ $1_$2 = $1_help ] ; then
		echo "$1: umount next3 volume and all its snapshots."
		echo "usage: $0 $1"
		exit 0
	fi
	if [ -e $ROOTDEV ] ; then
		# umount all snapshots
		$0 umount
		# umount next3 volume
		if [ -e $UMOUNT_NEXT3 ] ; then
			$UMOUNT_NEXT3 $ROOTDEV $ROOTDIR $VOL
		else
			umount $ROOTDIR
		fi
	fi
	;;
  restart)
	if [ $1_$2 = $1_help ] ; then
		echo "$1: remount next3 volume and all its snapshots."
		echo "usage: $0 $1"
		exit 0
	fi
	$0 stop
	$0 start
	;;

  printst)
	echo $2 $7 $3 $5 ${13} ${14} ${15} ${16}
	;;
  status|st)
	if [ $1_$2 = $1_help ] ; then
		echo "status: display status of next3 volume and all its snapshots."
		echo "snapshot attributes are displayed in short format. to display"
		echo "attributes in long format use the 'snapshot lsattr' command."
		echo "usage: $0 {status|st}"
		exit 0
	fi
	echo Mounted snapshots:
	df -h $ROOTDIR $SNAPMNTDIR/*/* 2> /dev/null
	echo .
	echo "Snapshots list:"
	echo "id inode attributes disk-usage mtime filename"
	echo "---------------------------------------------"
    for s in $( ls -vr $SNAPDIR/* ) ; do
		echo -n "$0 printst "
		echo -n "$( lsattr -v -X $s ) "
		echo -n "$( du -h $s ) "
		echo -n "$( ls -lih --color=never $s ) "
		echo
	done > /tmp/lssnap
	chmod a+x /tmp/lssnap
	/tmp/lssnap
	echo .
	;;
  lsattr)
	if [ $1_$2 = $1_help ] ; then
		echo "$1: display attributes of next3 snapshots in long format."
		echo "usage: $0 $1"
		exit 0
	fi
    lsattr -Xl $SNAPDIR
	;;

# Snapshot control commands (single snapshot)
  create|cr)
	if [ $1_$2 = $1_help ] ; then
		echo "create: create a new snapshot."
		echo "usage: $0 {create|cr} [snapshot-name] (default=@GMT-xxx)"
		exit 0
	fi
	if [ -f $SNAPDIR/$s ] ; then
		echo snapshot $s already exsists!
		exit 1
	else
		touch $SNAPDIR/$s
		$TIME chattr -X +S $SNAPDIR/$s
	fi
	;;
  take)
	if [ $1_$2 = $1_help ] ; then
		echo "take: create a new snapshot and mount it."
		echo "usage: $0 take [snapshot-name] (default=@GMT-xxx)"
		exit 0
	fi
	echo Taking snapshot $s
	$0 create $s || exit 1
	$0 mount $s
	echo .
	;;
  delete|del)
	if [ $1_$2 = $1_help ] ; then
		echo "delete: umount a snapshot and mark it for deletion."
		echo "any non-mounted snapshot can be marked for deletion"
		echo "but some snapshot deletion is deferred to later time."
		echo "usage: $0 {delete|del} <snapshot-name>"
		exit 0
	fi
	if [ -z $2 ] ; then
		$0
		exit 1
	fi
	if [ -f $SNAPDIR/$s ] ; then
		$0 umount $s
		$TIME chattr -X -S $SNAPDIR/$s
	fi
	;;
  remove|rm)
	if [ $1_$2 = $1_help ] ; then
		echo "remove: delete a snapshot permanently."
		echo "this command will fail for active snapshot and snapshots"
		echo "in use by older snapshots. try using the delete command."
		echo "usage: $0 {remove|rm} <snapshot-name>"
		exit 0
	fi
	if [ -z $2 ] ; then
		$0
		exit 1
	fi
	if [ -f $SNAPDIR/$s ] ; then
		$0 delete $s
		rm -f $SNAPDIR/$s
	fi
	;;
  enable|en)
	if [ $1_$2 = $1_help ] ; then
		echo "enable: create the snapshot loop device."
		echo "usage: $0 {enable|en} <snapshot-name>"
		exit 0
	fi
	if [ -z $2 ] ; then
		$0
		exit 1
	fi
  	if [ -b $SNAPDEVDIR/$s/$VOL ] ; then
		exit 0
	fi
  	if [ -f $SNAPDIR/$s ] ; then
		$TIME chattr -X +n $SNAPDIR/$s || exit 1
		mkdir -p $SNAPDEVDIR/$s
		ln $(losetup -f) $SNAPDEVDIR/$s/$VOL
  		losetup -r -o 4243456 $SNAPDEVDIR/$s/$VOL $SNAPDIR/$s
	else
		echo snapshot $s not found!
		exit 1
  	fi
	;;
  disable|di)
	if [ $1_$2 = $1_help ] ; then
		echo "disable: remove the snapshot loop device."
		echo "usage: $0 {disable|di} <snapshot-name>"
		exit 0
	fi
	if [ -z $2 ] ; then
		$0
		exit 1
	fi
	if [ -d $SNAPMNTDIR/$s ] ; then
		echo snapshot $s is mounted!
		exit 1
	fi
  	if [ -b $SNAPDEVDIR/$s/$VOL ] ; then
		losetup -d $SNAPDEVDIR/$s/$VOL
		rm $SNAPDEVDIR/$s/$VOL
		rmdir $SNAPDEVDIR/$s
	fi
	chattr -X -n $SNAPDIR/$s
	;;

# Snapshot control commands (single or all snapshots)
  mount|mo)
	if [ $1_$2 = $1_help ] ; then
		echo "mount: mount a snapshot."
		echo "usage: $0 {mount|mo} [snapshot-name] (default=all)"
		exit 0
	fi
	if [ -z $2 ] ; then
		for s in $( ls $SNAPDIR/ ) ; do
			$0 mount $s 2> /dev/null
		done
	else
  		$0 enable $s || exit 1
		if [ -b $SNAPDEVDIR/$s/$VOL ] ; then
			mkdir -p $SNAPMNTDIR/$s/$VOL
  			mount -t ext2 -r $SNAPDEVDIR/$s/$VOL $SNAPMNTDIR/$s/$VOL || exit 1
  		fi
  	fi
	;;
  umount|um)
	if [ $1_$2 = $1_help ] ; then
		echo "umount: umount a snapshot."
		echo "usage: $0 {umount|um} [snapshot-name] (default=all)"
		exit 0
	fi
	if [ -z $2 ] ; then
		for s in $( ls $SNAPDIR/ ) ; do
			$0 umount $s 2> /dev/null
		done
	else
		if [ -d $SNAPMNTDIR/$s ] ; then
			umount $SNAPMNTDIR/$s/$VOL
			rmdir $SNAPMNTDIR/$s/$VOL
			rmdir $SNAPMNTDIR/$s
		fi
  		$0 disable $s
	fi
	;;
  remount)
	if [ $1_$2 = $1_help ] ; then
		echo "remount: remount a snapshot."
		echo "usage: $0 remount [snapshot-name] (default=all)"
		exit 0
	fi
	$0 umount $2
	$0 mount $2
	;;

# Snapshot sanity tests
  dump)
	if [ $1_$2 = $1_help ] ; then
		echo "dump: print a map of a snapshot file."
		echo "map is printed in KERN_DEBUG level - use dmesg to view the map."
		echo "usage: $0 dump [snapshot-name] (default=all)"
		exit 0
	fi
	if [ -z $2 ] ; then
		$0 debug 5
		$0 restart
		$0 debug $L
	else
		chattr +c $SNAPDIR/$s
	fi
	;;
  clean|cl)
	if [ $1_$2 = $1_help ] ; then
		echo "clean: verify all snapshot file blocks are excluded."
		echo "sanity test to verify the health of the exclude bitmap."
		echo "usage: $0 {clean|cl} [snapshot-name] (default=all)"
		exit 0
	fi
	echo snapshot clean is under construction!
	exit 1
	if [ -z $2 ] ; then
		for s in $( ls $SNAPDIR/ ) ; do
			$0 clean $s
		done
  	elif [ -f $SNAPDIR/$s ] ; then
		$TIME chattr -X +t $SNAPDIR/$s
	else
		echo snapshot $s not found!
		exit 1
	fi
	;;
  fsck)
	if [ $1_$2 = $1_help ] ; then
		echo "fsck: run fsck on a snapshot or next3 volume."
		echo "usage: $0 fsck [snapshot-name] (default=volume)"
		exit 0
	fi
	$0 debug 0
	if [ -z $2 ] ; then
		$0 stop || exit 1
		e2fsck -pf -C 0 $ROOTDEV && \
			echo $ROOTDEV 'is healthy' || \
			echo $ROOTDEV 'has errors'
		$0 start
	else
		$0 umount $2 2> /dev/null
		$0 enable $2
		e2fsck -nf -C 0 $SNAPDEVDIR/$2/$VOL && \
			echo $SNAPDEVDIR/$2/$VOL 'is healthy' || \
			echo $SNAPDEVDIR/$2/$VOL 'has errors'
		$0 mount $2
	fi
	$0 debug $L
	;;
  ls)
	if [ $1_$2 = $1_help ] ; then
		echo "ls: list the content of a snapshot or next3 volume."
		echo "usage: $0 ls [snapshot-name] (default=volume)"
		exit 0
	fi
	if [ -z $2 ] ; then
		echo Files in file system:
		d=$ROOTDIR
	else
		echo Files in snapshot $s:
		d=$SNAPMNTDIR/$s/$VOL
	fi
	if [ -d $d ] ; then
		grep -v xxx $d/?/*
		find $d/ -maxdepth 1 -type f -print
		echo .
	fi
	;;
  tests)
	if [ $1_$2 = $1_help ] ; then
		echo "tests: run snapshot sanity tests 1..N."
		echo "usage: $0 {test|tests} [test-number]"
		exit 0
	fi
	if [ -z $2 ] ; then
		n=4
	else
		n=$2
	fi
	for s in $( ls $SNAPDIR/ ) ; do
		$0 delete $s 2> /dev/null
	done
	for s in $( ls $SNAPDIR/ ) ; do
		$0 remove $s 2> /dev/null
	done
	test $n -ge 0 && $0 test 0
	test $n -ge 1 && $0 test 1
	test $n -ge 2 && $0 test 2
	test $n -ge 3 && $0 test 3
	test $n -ge 4 && $0 test 4
	test $n -ge 5 && $0 test 5
	test $n -ge 6 && $0 test 6
	test $n -ge 7 && $0 test 7
	test $n -ge 8 && $0 test 8
	;;
  test)
	if [ $1_$2 = $1_help ] ; then
		echo "test: run snapshot sanity test N."
		echo "usage: $0 test [test-number]"
		exit 0
	fi
	if [ -z $2 ] ; then
		n=1
	else
		n=$2
	fi
	if [ $n = 0 ] ; then
		rm -rf $ROOTDIR/? 2> /dev/null
		rm -rf $ROOTDIR/*M 2> /dev/null
		mkdir $ROOTDIR/A
		mkdir $ROOTDIR/B
		mkdir $ROOTDIR/C
		mkdir $ROOTDIR/D
		mkdir $ROOTDIR/E
		echo aligator > $ROOTDIR/A/a.txt
		echo bizon > $ROOTDIR/B/b.txt
		echo camel > $ROOTDIR/C/c.txt
		exit 0
	fi
	echo
	echo Running snapshot test $n:
	echo ------------------------
	#sleep 6 # wait for journal commit
	N=${n}0
	F=${N}M
	echo Creating /$F
	dd if=/dev/zero bs=1M count=$N of=$ROOTDIR/$F 2> /dev/null
	#chattr +d $ROOTDIR/$F
	$0 ls
	s=$n
	#s=$( date -u +@GMT-%Y.%m.%d-%H.%M.%S )
	$0 take $s
	#$0 clean $s
	echo Removing /$F
	rm $ROOTDIR/$F
	case "$n" in
  	  1)
		echo Create test:
		echo ------------
		echo 'Creating d.txt'
		echo dodo > $ROOTDIR/D/d.txt
		echo 'Creating e.txt'
		echo emu > $ROOTDIR/E/e.txt
	  ;;
	  2)
		echo Write test:
		echo -----------
		echo 'Writing b.txt (append)'
		echo 'barracuda' >> $ROOTDIR/B/b.txt
		echo 'Writing c.txt (truncate)'
		echo 'crocodile' > $ROOTDIR/C/c.txt
	  ;;
	  3)
		echo Remove test:
		echo ------------
		echo 'Removing d.txt'
		rm $ROOTDIR/D/d.txt
	  ;;
	  4)
		echo Restore test:
		echo -------------
		f=$( ls -v $SNAPDIR/ | head -n 1 )
		echo 'Restoring from snapshot' $f
		if [ ! -d $SNAPMNTDIR/$f ] ; then
			$0 mount $f || exit 1
		fi
		rm -rf $ROOTDIR/?
		cp -R $SNAPMNTDIR/$f/$VOL/? $ROOTDIR/
	  ;;
	  5)
		echo Delete excluded test:
		echo ---------------------
	  	echo Removing excluded files
	  	rm $ROOTDIR/*M
	  ;;
	  6)
		echo Delete reallocated test:
		echo ------------------------
		chattr -d $ROOTDIR/$F
		echo Removing /$F
		rm $ROOTDIR/$F
	  ;;
	  7)
		echo Shrink snapshots test:
		echo ---------------------
		for f in 5 6 4 3 2 ; do
			echo 'Deleting snapshot' $f
			$0 delete $f 2> /dev/null
			#sleep 1
			#$0 fsck
			$0 st
		done
	  ;;
	  8)
		echo Merge snapshots test:
		echo ---------------------
		$0 um
		for f in 7 1 8 ; do
			echo 'Deleting snapshot' $f
			$0 delete $f 2> /dev/null
			#sleep 1
			#$0 fsck
			$0 st
		done
	  ;;
	esac
	#sleep 1
	#$0 fsck
	echo .
	$0 ls
	$0 ls $s
	$0 st
	;;
  *)
	echo "usage: $0 help [cmd]"
	echo "usage: $0 version"
	echo "usage: $0 debug [debug-level]"
	echo "usage: $0 delay <take|delete|cow|read|bitmap> [delay-sec] [delay-msec]"
	echo "usage: $0 config <block-device> <mount-point> <volume-name>"
	echo "usage: $0 {install|in|uninstall|un|start|restart|stop|status|st|lsattr|mkfs}"
	echo "usage: $0 {create|cr|take} [snapshot-name] (default=@GMT-xxx)"
	echo "usage: $0 {enable|en|disable|di|delete|del|remove|rm} <snapshot-name>"
	echo "usage: $0 {mount|mo|umount|um|remount|dump|clean|cl} [snapshot-name] (default=all)"
	echo "usage: $0 {fsck|ls} [snapshot-name] (default=volume)"
	echo "usage: $0 {test|tests} [test-number]"
	exit 1
esac

exit 0
